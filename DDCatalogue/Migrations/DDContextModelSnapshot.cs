// <auto-generated />
using System;
using System.Collections.Generic;
using DDCatalogue.Contexts;
using DDCatalogue.Model.Properties;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DDCatalogue.Migrations
{
    [DbContext(typeof(DDContext))]
    partial class DDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Alignment")
                        .HasColumnType("integer");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HitDice")
                        .HasColumnType("text");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<string>("Languages")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<string>("Proficiencies")
                        .HasColumnType("text");

                    b.Property<string>("Reactions")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("Speed")
                        .HasColumnType("text");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Creature");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Creature");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Npc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Background")
                        .HasColumnType("text");

                    b.Property<string>("Beliefs")
                        .HasColumnType("text");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Flaws")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocaleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MonsterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NoteableEvents")
                        .HasColumnType("text");

                    b.Property<string>("Passions")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.HasIndex("MonsterId");

                    b.ToTable("Npcs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce2d5a1c-3b0b-4f15-92bc-4e9580be1d95"),
                            Background = "Raised with his three brothers, Klarg was below average intelligence to say the least. Always playing Kings and Queens, he became obsessed with being the ruler of a country. He forged his own crown, and took over a goblin bandit gang declaring himself as their King.|Klarg has since made a deal with Iarno to steal supplies from Phandalin and to resupply the Redbrands instead.",
                            Beliefs = "[]",
                            Flaws = "[]",
                            LocaleId = new Guid("a5d3885b-7b2a-466d-88ba-921f1d71f1b4"),
                            MonsterId = new Guid("dbfb7da7-08b2-4b12-adf4-2f8fe7c15c34"),
                            Name = "Klarg BigCrown",
                            NoteableEvents = "[\"Made a deal with the party for Yeemik's head\",\"Killed by the party\"]",
                            Passions = "[]",
                            Picture = "Klarg_BigCrown.jpg"
                        },
                        new
                        {
                            Id = new Guid("e5188e4c-6375-4d9e-8ae8-01e97f975bf0"),
                            Background = "",
                            Beliefs = "[]",
                            Flaws = "[]",
                            LocaleId = new Guid("9b2ff871-d933-4811-acfa-764f8173df3c"),
                            MonsterId = new Guid("0cc31a48-dfa1-403c-ac9a-1c39bd533dfb"),
                            Name = "Gundren Rockseeker",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("99dc4563-34da-4558-a5c7-a39cf1bb296b"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("3829d18f-0c01-4c08-a16f-55d983db578a"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("fe3133a3-b86a-4f53-833c-df0bb75dc2a2"),
                            Name = "Sildar Hallwinter",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("3ae33b0e-eff1-42d3-94eb-978151447d3a"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("b3c67d0b-ba6c-4974-b393-5c7d3f1d6644"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Elmar Barthen",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("8ad35369-4c60-4bc0-a43a-ecd13fcc5094"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("b439fe6f-dde1-4854-8ea6-a5972a6ea06e"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("fe3133a3-b86a-4f53-833c-df0bb75dc2a2"),
                            Name = "Linene Graywind",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("17286391-d384-4c99-a5d7-25b8b745841b"),
                            Background = "",
                            Beliefs = "[]",
                            Flaws = "[]",
                            LocaleId = new Guid("a5d3885b-7b2a-466d-88ba-921f1d71f1b4"),
                            MonsterId = new Guid("a17bd70f-a811-4a63-bd43-17f77f696e86"),
                            Name = "Yeemik Largebrain",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("62375d83-0351-4968-959d-8cd329d279fa"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("5ca1de81-cf25-4c98-a251-1c3fe661457f"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Iarno Albrek",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("6a84b114-50eb-4a8e-8d9f-7af748fb4a7e"),
                            Background = "",
                            Beliefs = "[]",
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("0cc31a48-dfa1-403c-ac9a-1c39bd533dfb"),
                            Name = "Tharden Rockseeker",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("b3d85d3d-e8b5-4348-9c09-fcf6beb4aa1b"),
                            Background = "",
                            Beliefs = "[]",
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("0cc31a48-dfa1-403c-ac9a-1c39bd533dfb"),
                            Name = "Nundro Rockseeker",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("2af8e063-a51c-4b35-b2aa-afe4c80bcfae"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("6f6bfd5e-a158-487a-b54a-9f27842ce762"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("2dc5b20f-6d65-4c4d-8928-597d3e8291fa"),
                            Name = "Toblen Stonehill",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = "Toblen_Stonehill.jpg"
                        },
                        new
                        {
                            Id = new Guid("d4368ed6-b706-45d1-9b70-93df51d3d285"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("0110289a-95c6-4385-be5d-741821c8a107"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Daran Edermath",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("47b3dc26-04c8-48e9-abc0-a0520feca227"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("e54fa7e6-34c0-4ed4-9338-9341162739e5"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Halia Thornton",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("b1d2b4b7-dab2-4d4b-b757-a47b62ac45e7"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("7042bd21-7239-4866-bcd3-a7a054c05430"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Qelline Alderleaf",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("701cf283-f930-42b1-a5df-de4ed109a693"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("4c3bf7ce-dfd6-4894-afa7-f86137003e87"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Sister Garaele",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        },
                        new
                        {
                            Id = new Guid("d00283f9-c643-4ad6-8bff-bd18fb816300"),
                            Background = "",
                            Beliefs = "[]",
                            BuildingId = new Guid("3829d18f-0c01-4c08-a16f-55d983db578a"),
                            Flaws = "[]",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            MonsterId = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Name = "Harbin Wester",
                            NoteableEvents = "[]",
                            Passions = "[]",
                            Picture = ""
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.BuildingMap", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uuid");

                    b.Property<string>("Coords")
                        .HasColumnType("text");

                    b.HasKey("BuildingId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("BuildingMap");

                    b.HasData(
                        new
                        {
                            BuildingId = new Guid("6f6bfd5e-a158-487a-b54a-9f27842ce762"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[1830,3083]"
                        },
                        new
                        {
                            BuildingId = new Guid("b3c67d0b-ba6c-4974-b393-5c7d3f1d6644"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[1107,3735]"
                        },
                        new
                        {
                            BuildingId = new Guid("0110289a-95c6-4385-be5d-741821c8a107"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[1041,876]"
                        },
                        new
                        {
                            BuildingId = new Guid("b439fe6f-dde1-4854-8ea6-a5972a6ea06e"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[2280,2300]"
                        },
                        new
                        {
                            BuildingId = new Guid("e54fa7e6-34c0-4ed4-9338-9341162739e5"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[3101,2115]"
                        },
                        new
                        {
                            BuildingId = new Guid("7042bd21-7239-4866-bcd3-a7a054c05430"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[2971,4447]"
                        },
                        new
                        {
                            BuildingId = new Guid("4c3bf7ce-dfd6-4894-afa7-f86137003e87"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[1656,2445]"
                        },
                        new
                        {
                            BuildingId = new Guid("d4b56822-cd18-4a75-b8c9-b51f1d32236c"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[1913,4396]"
                        },
                        new
                        {
                            BuildingId = new Guid("3829d18f-0c01-4c08-a16f-55d983db578a"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[2382,2836]"
                        },
                        new
                        {
                            BuildingId = new Guid("5ca1de81-cf25-4c98-a251-1c3fe661457f"),
                            MapId = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            Coords = "[1351,6418]"
                        },
                        new
                        {
                            BuildingId = new Guid("6f6bfd5e-a158-487a-b54a-9f27842ce762"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[1830,3083]"
                        },
                        new
                        {
                            BuildingId = new Guid("b3c67d0b-ba6c-4974-b393-5c7d3f1d6644"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[1107,3735]"
                        },
                        new
                        {
                            BuildingId = new Guid("0110289a-95c6-4385-be5d-741821c8a107"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[1041,876]"
                        },
                        new
                        {
                            BuildingId = new Guid("b439fe6f-dde1-4854-8ea6-a5972a6ea06e"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[2280,2300]"
                        },
                        new
                        {
                            BuildingId = new Guid("e54fa7e6-34c0-4ed4-9338-9341162739e5"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[3101,2115]"
                        },
                        new
                        {
                            BuildingId = new Guid("7042bd21-7239-4866-bcd3-a7a054c05430"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[2971,4447]"
                        },
                        new
                        {
                            BuildingId = new Guid("4c3bf7ce-dfd6-4894-afa7-f86137003e87"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[1656,2445]"
                        },
                        new
                        {
                            BuildingId = new Guid("d4b56822-cd18-4a75-b8c9-b51f1d32236c"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[1913,4396]"
                        },
                        new
                        {
                            BuildingId = new Guid("3829d18f-0c01-4c08-a16f-55d983db578a"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[2382,2836]"
                        },
                        new
                        {
                            BuildingId = new Guid("5ca1de81-cf25-4c98-a251-1c3fe661457f"),
                            MapId = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            Coords = "[1351,6418]"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterBuilding", b =>
                {
                    b.Property<Guid>("MonsterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.HasKey("MonsterId", "BuildingId");

                    b.HasIndex("BuildingId");

                    b.ToTable("MonsterBuilding");
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterLocale", b =>
                {
                    b.Property<Guid>("MonsterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("uuid");

                    b.HasKey("MonsterId", "LocaleId");

                    b.HasIndex("LocaleId");

                    b.ToTable("MonsterLocale");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Map")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f6bfd5e-a158-487a-b54a-9f27842ce762"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Stonehill Inn"
                        },
                        new
                        {
                            Id = new Guid("b3c67d0b-ba6c-4974-b393-5c7d3f1d6644"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Barthen's Provisions"
                        },
                        new
                        {
                            Id = new Guid("0110289a-95c6-4385-be5d-741821c8a107"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Edermath Orchard"
                        },
                        new
                        {
                            Id = new Guid("b439fe6f-dde1-4854-8ea6-a5972a6ea06e"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Lionshield Coster"
                        },
                        new
                        {
                            Id = new Guid("e54fa7e6-34c0-4ed4-9338-9341162739e5"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Phandalin Miner's Exchange"
                        },
                        new
                        {
                            Id = new Guid("7042bd21-7239-4866-bcd3-a7a054c05430"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Alderleaf Farm"
                        },
                        new
                        {
                            Id = new Guid("4c3bf7ce-dfd6-4894-afa7-f86137003e87"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Shrine of Luck"
                        },
                        new
                        {
                            Id = new Guid("d4b56822-cd18-4a75-b8c9-b51f1d32236c"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "The Sleeping Giant"
                        },
                        new
                        {
                            Id = new Guid("3829d18f-0c01-4c08-a16f-55d983db578a"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Townmaster's Hall"
                        },
                        new
                        {
                            Id = new Guid("5ca1de81-cf25-4c98-a251-1c3fe661457f"),
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Map = "Tresendar_Manor.png",
                            Name = "Tresendar Manor"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Continent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Map")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Continents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9504646c-77c0-4f92-aec1-2fadf62cd2b7"),
                            Name = "Faerun"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Dungeon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocaleId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Map")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.ToTable("Dungeons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f005891-d2fb-4207-9df9-bb5de4a59bd5"),
                            Name = "Cragmaw Hideout"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Locales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05a500d0-ab28-47dd-8a70-af9befc98589"),
                            Name = "Neverwinter",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("8cc5872e-b07b-4134-ae92-a60773901584"),
                            Name = "Thundertree",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("9b2ff871-d933-4811-acfa-764f8173df3c"),
                            Name = "Cragmaw Castle",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("76b7fe93-49cb-45cc-bb11-042999aa0216"),
                            Name = "Conyberry",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("c32bcb3c-12db-4b9d-8660-abc61ea9f4b6"),
                            Name = "Old Owl Well",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Phandalin",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("3087d4c8-1435-4f90-9a55-b532847190f2"),
                            Name = "Leilon",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("e6128841-36f5-4acb-8448-a37fbd1806c8"),
                            Name = "Neverwinter",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        },
                        new
                        {
                            Id = new Guid("a5d3885b-7b2a-466d-88ba-921f1d71f1b4"),
                            Name = "Cragmaw Hideout",
                            RegionId = new Guid("050b1c46-0676-420b-872c-143db80d358b")
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Center")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Variation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.ToTable("Map");

                    b.HasData(
                        new
                        {
                            Id = new Guid("148d6be4-48e7-451e-8096-2f399937fc51"),
                            ImageUrl = "PhanDawn.jpg",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Phandalin_Dawn",
                            Variation = "Dawn"
                        },
                        new
                        {
                            Id = new Guid("d6236d75-aa21-4569-bc13-7a8c913997d9"),
                            ImageUrl = "PhanDay.jpg",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Phandalin_Day",
                            Variation = "Day"
                        },
                        new
                        {
                            Id = new Guid("4fd05e80-0d1f-4497-9886-61d1137c3272"),
                            ImageUrl = "PhanNight.jpg",
                            LocaleId = new Guid("97e40163-3c5c-4f76-b3ce-e6e88ec936ed"),
                            Name = "Phandalin_Night",
                            Variation = "Night"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContinentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Map")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("050b1c46-0676-420b-872c-143db80d358b"),
                            ContinentId = new Guid("9504646c-77c0-4f92-aec1-2fadf62cd2b7"),
                            Map = "Sword_Coast_North.png",
                            Name = "Sword Coast North"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Monster", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Creatures.Creature");

                    b.Property<List<CreatureAction>>("Actions")
                        .HasColumnType("jsonb");

                    b.Property<double>("ChallengeRating")
                        .HasColumnType("double precision");

                    b.Property<string>("LegendaryActions")
                        .HasColumnType("text");

                    b.Property<int>("MonsterType")
                        .HasColumnType("integer");

                    b.Property<int>("PassivePerception")
                        .HasColumnType("integer");

                    b.Property<string>("Senses")
                        .HasColumnType("text");

                    b.Property<string>("SpecialAbilities")
                        .HasColumnType("text");

                    b.Property<int>("Xp")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Monster");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cc31a48-dfa1-403c-ac9a-1c39bd533dfb"),
                            Alignment = 0,
                            ArmorClass = 16,
                            Charisma = 10,
                            Constitution = 14,
                            Dexterity = 11,
                            HitDice = "",
                            HitPoints = 39,
                            Intelligence = 10,
                            Languages = "Common, Dwarvish",
                            Name = "Drawf Warrior",
                            Picture = "",
                            Proficiencies = "[]",
                            Reactions = "[]",
                            Size = "Medium",
                            Speed = "[{\"Name\":\"walk\",\"Value\":25,\"Measurement\":\"ft\"}]",
                            Strength = 14,
                            Wisdom = 11,
                            ChallengeRating = 1.0,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 10,
                            Senses = "{\"darkvision\":\"60 ft.\"}",
                            SpecialAbilities = "[]",
                            Xp = 0
                        },
                        new
                        {
                            Id = new Guid("dbfb7da7-08b2-4b12-adf4-2f8fe7c15c34"),
                            Alignment = 8,
                            ArmorClass = 16,
                            Charisma = 9,
                            Constitution = 13,
                            Dexterity = 14,
                            HitDice = "5d8",
                            HitPoints = 27,
                            Intelligence = 8,
                            Languages = "Common, Goblin",
                            Name = "Bugbear",
                            Picture = "bugbear.jpeg",
                            Proficiencies = "[{\"name\":\"Skill: Stealth\",\"value\":6},{\"name\":\"Skill: Survival\",\"value\":2}]",
                            Reactions = "[]",
                            Size = "Medium",
                            Speed = "[{\"Name\":\"walk\",\"Value\":30,\"Measurement\":\"ft\"}]",
                            Strength = 15,
                            Wisdom = 11,
                            ChallengeRating = 1.0,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 10,
                            Senses = "{\"darkvision\":\"60 ft.\"}",
                            SpecialAbilities = "[{\"name\":\"Brute\",\"desc\":\"A melee weapon deals one extra die of its damage when the bugbear hits with it (included in the attack).\"},{\"name\":\"Surprise Attack\",\"desc\":\"If the bugbear surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 7 (2d6) damage from the attack.\"}]",
                            Xp = 200
                        },
                        new
                        {
                            Id = new Guid("fe3133a3-b86a-4f53-833c-df0bb75dc2a2"),
                            Alignment = 9,
                            ArmorClass = 18,
                            Charisma = 15,
                            Constitution = 14,
                            Dexterity = 11,
                            HitDice = "",
                            HitPoints = 52,
                            Intelligence = 11,
                            Languages = "Any one",
                            Name = "Knight",
                            Picture = "",
                            Proficiencies = "[]",
                            Reactions = "[]",
                            Size = "Medium",
                            Speed = "[{\"Name\":\"walk\",\"Value\":30,\"Measurement\":\"ft\"}]",
                            Strength = 16,
                            Wisdom = 11,
                            ChallengeRating = 3.0,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 10,
                            Senses = "{}",
                            SpecialAbilities = "[]",
                            Xp = 0
                        },
                        new
                        {
                            Id = new Guid("a17bd70f-a811-4a63-bd43-17f77f696e86"),
                            Alignment = 5,
                            ArmorClass = 15,
                            Charisma = 8,
                            Constitution = 10,
                            Dexterity = 14,
                            HitDice = "",
                            HitPoints = 7,
                            Intelligence = 10,
                            Languages = "Common, Goblin",
                            Name = "Goblin",
                            Picture = "",
                            Proficiencies = "[]",
                            Reactions = "[]",
                            Size = "Small",
                            Speed = "[{\"Name\":\"walk\",\"Value\":30,\"Measurement\":\"ft\"}]",
                            Strength = 8,
                            Wisdom = 8,
                            ChallengeRating = 0.25,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 9,
                            Senses = "{}",
                            SpecialAbilities = "[]",
                            Xp = 0
                        },
                        new
                        {
                            Id = new Guid("daf11f58-fdc0-4ca7-a291-8b7f1d248070"),
                            Alignment = 9,
                            ArmorClass = 10,
                            Charisma = 10,
                            Constitution = 10,
                            Dexterity = 10,
                            HitDice = "",
                            HitPoints = 4,
                            Intelligence = 10,
                            Languages = "Any one",
                            Name = "Commoner",
                            Picture = "",
                            Proficiencies = "[]",
                            Reactions = "[]",
                            Size = "Medium",
                            Speed = "[{\"Name\":\"walk\",\"Value\":30,\"Measurement\":\"ft\"}]",
                            Strength = 10,
                            Wisdom = 10,
                            ChallengeRating = 0.0,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 10,
                            Senses = "{}",
                            SpecialAbilities = "[]",
                            Xp = 0
                        },
                        new
                        {
                            Id = new Guid("ab4d8995-b5d1-4e07-aad8-249faee6d16d"),
                            Alignment = 10,
                            ArmorClass = 13,
                            Charisma = 6,
                            Constitution = 12,
                            Dexterity = 15,
                            HitDice = "",
                            HitPoints = 11,
                            Intelligence = 3,
                            Languages = "",
                            Name = "Wolf",
                            Picture = "",
                            Proficiencies = "[]",
                            Reactions = "[]",
                            Size = "Medium",
                            Speed = "[{\"Name\":\"walk\",\"Value\":40,\"Measurement\":\"ft\"}]",
                            Strength = 12,
                            Wisdom = 12,
                            ChallengeRating = 0.25,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 13,
                            Senses = "{}",
                            SpecialAbilities = "[]",
                            Xp = 0
                        },
                        new
                        {
                            Id = new Guid("2dc5b20f-6d65-4c4d-8928-597d3e8291fa"),
                            Alignment = 0,
                            ArmorClass = 14,
                            Charisma = 10,
                            Constitution = 12,
                            Dexterity = 10,
                            HitDice = "",
                            HitPoints = 26,
                            Intelligence = 10,
                            Languages = "Common, Dwarvish",
                            Name = "Dwarf",
                            Picture = "",
                            Proficiencies = "[]",
                            Reactions = "[]",
                            Size = "Medium",
                            Speed = "[{\"Name\":\"walk\",\"Value\":25,\"Measurement\":\"ft\"}]",
                            Strength = 13,
                            Wisdom = 12,
                            ChallengeRating = 0.5,
                            LegendaryActions = "[]",
                            MonsterType = 14,
                            PassivePerception = 10,
                            Senses = "{}",
                            SpecialAbilities = "[]",
                            Xp = 0
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Player", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Creatures.Creature");

                    b.Property<string>("Background")
                        .HasColumnType("text");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Faction")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerName")
                        .HasColumnType("text");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Armour", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Armour");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Treasure", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Treasure");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Weapon", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Npc", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Npcs")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Npcs")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Npcs")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Building");

                    b.Navigation("Locale");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.BuildingMap", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Maps")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDCatalogue.Model.Locations.Map", "Map")
                        .WithMany("Buildings")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterBuilding", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Monsters")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Buildings")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterLocale", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Monsters")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Locales")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locale");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Buildings")
                        .HasForeignKey("LocaleId");

                    b.Navigation("Locale");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Dungeon", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Dungeons")
                        .HasForeignKey("LocaleId");

                    b.Navigation("Building");

                    b.Navigation("Locale");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Region", "Region")
                        .WithMany("Locales")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Map", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Maps")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locale");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Continent", "Continent")
                        .WithMany("Regions")
                        .HasForeignKey("ContinentId");

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Player", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Players")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Players")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Building");

                    b.Navigation("Locale");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.Navigation("Maps");

                    b.Navigation("Monsters");

                    b.Navigation("Npcs");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Continent", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Dungeons");

                    b.Navigation("Maps");

                    b.Navigation("Monsters");

                    b.Navigation("Npcs");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Map", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.Navigation("Locales");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Monster", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Locales");

                    b.Navigation("Npcs");
                });
#pragma warning restore 612, 618
        }
    }
}
